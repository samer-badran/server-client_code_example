
#include <arpa/inet.h> 
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <strings.h> 
#include <sys/socket.h>
#include <unistd.h> 
#include <signal.h>

#define BUFFER_SIZE 4096

//SIGQUIT signal handler
void sig_quit(int signo)
{ 
	printf("Good bye, Quitting..\n");
	exit(0);
	return;
}
void print_operations() {
    printf("\nAvailable Operations:\n");
    printf("1. Compute the count of words in the string\n");
    printf("2. Compute the count of vowel letters in the string\n");
    printf("3. Compute the non alpha-numeric charachters\n");
    printf("4. Find the longest word in the string\n");
    printf("5. Find the repeated words in the string\n");
    printf("Select an operation (1-5): ");
}
void fun(int client_socket, FILE *input_file)
{
    char line[BUFFER_SIZE];
    char buffer[BUFFER_SIZE];
    int operation;
//reads a line from input file 
    while (fgets(line, sizeof(line), input_file)) {
        size_t line_length = strlen(line);

        // Remove the newline character if present
        if (line[line_length - 1] == '\n') {
            line[line_length - 1] = '\0';
        }

        // Show available operations to the user
        print_operations();
        while (scanf("%d", &operation) != 1 || operation < 1 || operation > 5) {
            fprintf(stderr, "Invalid operation. Please select a valid operation (1-5).\n");
         // Clear invalid input to empty the buffer for the next input 
            while (getchar() != '\n'); 
            continue;
        }

        // Create the request (line + operation)
        snprintf(buffer, BUFFER_SIZE, "%d %s", operation, line);

        // Send the request to the server
        if (write(client_socket, buffer, strlen(buffer)) < 0) {
            perror("Error sending request to server");
            break;
        }

        // Wait for the server response
        memset(buffer, 0, BUFFER_SIZE); // Clear buffer
        if (read(client_socket, buffer, BUFFER_SIZE) < 0) {
            perror("Error receiving response from server");
            break;
        }

        // Print the result
        printf("%s\n", buffer);
    }
}

int main(int argc , char **argv)
{
	int sockfd, connfd;
	struct sockaddr_in servaddr, cli;

	//if-statement to check usage
	if (argc != 4) {
       printf("usage: %s <IPaddress> <Port> <input_file>\n",argv[0]);
       exit(1);
    }
    //check if port number is restricted
    if (atoi(argv[2]) <= 1023 && atoi(argv[2]) > 0){
    	printf("Port number is restriced/reserved\n");
    	exit(1);
    }
    //check if the port number is in the range
    if (atoi(argv[2]) > 65535 || atoi(argv[2]) < 0){
    	printf("Port number is out of range\n");
    	exit(1);
    }
    //SIGQUIT signal handler
    signal(SIGQUIT , sig_quit);
 // Open the input file
    FILE *file = fopen(argv[3], "r");
    if (!file) {
        perror("Error opening input file");
        return 1;
    }

	// socket create and verification
	sockfd = socket(AF_INET, SOCK_STREAM, 0);
	if (sockfd == -1) {
		printf("socket creation failed...\n");
		 fclose(file);
		exit(0);
	}
	bzero(&servaddr, sizeof(servaddr));

	// assign IP, PORT
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons(atoi(argv[2]));

	if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0) {
	    perror("inet_pton error");
	     fclose(file);
	    exit(1);
	  }

	// connect the client socket to server socket
	if (connect(sockfd, (struct sockaddr*)&servaddr, sizeof(servaddr))!= 0) 
	{
		printf("connection with the server failed...\n"); 
		fclose(file);
		exit(0);
	}
	else
		printf("connected to the server..\n");

	
	signal(SIGQUIT , sig_quit);
	// function for sending requests and receiving responses from the server  
	fun(sockfd ,file);

	// close the socket
	close(sockfd);
return 0;
}
